package bbs;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

//DAO는 데이터접근객체의 약자이다. 
	public class BbsDAO { //BbsDAO는 여러개의 함수가 사용되기 때문에 데이터베이스의 접근에 있어서 충돌이 일어나지 않도록 PreparedStatement를 지워준다. 
		   private Connection conn;
		
		   private ResultSet rs;
		   
		   //try catch 구문을 사용하여 예외처리 해준다. 만약 오류가 난다면 그 부분을 print해준다. 
		   public BbsDAO() {
		      try {
		         String dbURL = "jdbc:mysql://localhost:3306/BBS?characterEncoding=UTF-8&serverTimezone=Asia/Seoul "; //mysql 3306포트를 사용한다.
		         String dbID = "root";
		         String dbPassword="@qnpfr54953";
		         Class.forName("com.mysql.cj.jdbc.Driver");
		         //Driver라는 것은 mysql에 접속할 수 있도록 해준것이다.
		         conn = DriverManager.getConnection(dbURL,dbID,dbPassword);
		      }catch(Exception e) {
		         e.printStackTrace();
		      }
		  }
		   public String getDate() {//현재의 시간을 가져오는 부분으로써 게시판을 작성할 때 현재의 시간을 넣어주는 부분이다. 
			   String SQL = "SELECT NOW()";
			   try {
				   PreparedStatement pstmt = conn.prepareStatement(SQL); //현재 연결되어있는 conn객체를 이용해서 SQL을 문장을 실행 준비단계로 만들어준다. 
				   rs = pstmt.executeQuery();
				   if(rs.next()) {
					   return rs.getString(1); //반환해준다. 
				   }
			   } catch(Exception e) {
				   e.printStackTrace();
			   }
			   return "";
		   }
		   public int getNext() { 
			   String SQL = "SELECT bbsID FROM BBS ORDER BY bbsID DESC";
			   try {
				   PreparedStatement pstmt = conn.prepareStatement(SQL); //현재 연결되어있는 conn객체를 이용해서 SQL을 문장을 실행 준비단계로 만들어준다. 
				   rs = pstmt.executeQuery();
				   if(rs.next()) {
					   return rs.getInt(1)+1; //반환해준다. 
				   }
				   return 1; //첫 번째 게시물인 경우 
			   } catch(Exception e) {
				   e.printStackTrace();
			   }
			   return -1;
		   }
		   public int write(String bbsTitle,String userID,String bbsContent){ 
			   String SQL = "INSERT INTO BBS VALUES(?, ?, ?, ?, ?,?)";
			   try {
				   PreparedStatement pstmt = conn.prepareStatement(SQL); 
				   pstmt.setInt(1, getNext());
				   pstmt.setString(2, bbsTitle);
				   pstmt.setString(3, userID);
				   pstmt.setString(4, getDate());
				   pstmt.setString(5, bbsContent);
				   pstmt.setInt(6, 1);// rs= pstmt.executeQuery(); insert는 자동으로 해줌 
				   return pstmt.executeUpdate();
			   } catch(Exception e) {
				   e.printStackTrace();
			   }
			   return -1;
		   }
		   public ArrayList<Bbs> getList(int pageNumber){
			   String SQL = "SELECT * FROM BBS WHERE bbsID < ? AND bbsAvailable = 1 ORDER BY bbsID DESC LIMIT 10";
			   ArrayList<Bbs> list = new ArrayList<Bbs>();
			   try {
				   PreparedStatement pstmt = conn.prepareStatement(SQL); 
				   pstmt.setInt(1, getNext() - (pageNumber - 1) * 10);  
				   // getNext글 다음에 작성될 번호  현재 만약 게시글 5개라고 가정한다면 getNext하면 6개 // 페이지는 1이니깐 결과적으로는 6이라는 값이 결정된다.
				  rs = pstmt.executeQuery();
				  while(rs.next()) {
					  Bbs bbs = new Bbs();
					  bbs.setBbsID(rs.getInt(1));
					  bbs.setBbsTitle(rs.getString(2));
					  bbs.setUserID(rs.getString(3));
					  bbs.setBbsDate(rs.getString(4));
					  bbs.setBbsContent(rs.getString(5));
					  bbs.setBbsAvailable(rs.getInt(6));
					  list.add(bbs);
				  }
			   } catch(Exception e) {
				   e.printStackTrace();
			   }
			   return list;
		   }
		   public boolean nextPage(int pageNumber) { //페이징 처리를 위해서 존재한다.
			   String SQL = "SELECT * FROM BBS WHERE bbsID < ? AND bbsAvailable = 1";
			   ArrayList<Bbs> list = new ArrayList<Bbs>();
			   try {
				   PreparedStatement pstmt = conn.prepareStatement(SQL); 
				   pstmt.setInt(1, getNext() - (pageNumber - 1) * 10);  
				   // getNext글 다음에 작성될 번호  현재 만약 게시글 5개라고 가정한다면 getNext하면 6개 // 페이지는 1이니깐 결과적으로는 6이라는 값이 결정된다.
				  rs = pstmt.executeQuery();
				  while(rs.next()) {
					 return true; //다음페이지로 넘어갈 수 있게 해준다. 
				  }
			   } catch(Exception e) {
				   e.printStackTrace();
			   }
			   return false;
		   }
		   
		   public Bbs getBbs(int bbsID) {
			   String SQL = "SELECT * FROM BBS WHERE bbsID = ?";
			   ArrayList<Bbs> list = new ArrayList<Bbs>();
			   try {
				   PreparedStatement pstmt = conn.prepareStatement(SQL); 
				   pstmt.setInt(1, bbsID);  
				   // getNext글 다음에 작성될 번호  현재 만약 게시글 5개라고 가정한다면 getNext하면 6개 // 페이지는 1이니깐 결과적으로는 6이라는 값이 결정된다.
				  rs = pstmt.executeQuery();
				  while(rs.next()) {
					  Bbs bbs = new Bbs();
					  bbs.setBbsID(rs.getInt(1));
					  bbs.setBbsTitle(rs.getString(2));
					  bbs.setUserID(rs.getString(3));
					  bbs.setBbsDate(rs.getString(4));
					  bbs.setBbsContent(rs.getString(5));
					  bbs.setBbsAvailable(rs.getInt(6));
					  return bbs; //bbs인스턴스를 불러가지고 반환하는 대상한테 그대로 돌려준다. 
				  }
			   } catch(Exception e) {
				   e.printStackTrace();
			   }
			   return null;
		   }
		   public int update(int bbsID,String bbsTitle,String bbsContent) {
			   String SQL = "UPDATE BBS SET bbsTitle = ?, bbsContent = ? WHERE bbsID = ?";
			   try {
				   PreparedStatement pstmt = conn.prepareStatement(SQL); 
				   pstmt.setString(1, bbsTitle);
				   pstmt.setString(2, bbsContent);
				   pstmt.setInt(3, bbsID);
				
				   return pstmt.executeUpdate();
			   } catch(Exception e) {
				   e.printStackTrace();
			   }
			   return -1;
		   }
		   public int delete(int bbsID) {
			   String SQL = "UPDATE BBS SET bbsAvailable = 0 WHERE bbsID = ?";
			   try {
				   PreparedStatement pstmt = conn.prepareStatement(SQL); 
				   pstmt.setInt(1, bbsID);
				   return pstmt.executeUpdate();
			   } catch(Exception e) {
				   e.printStackTrace();
			   }
			   return -1;
		   }
}

